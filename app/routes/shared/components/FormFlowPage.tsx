import { useMemo } from "react";
import { useLoaderData } from "react-router";
import Heading from "~/components/common/Heading";
import ArraySummary from "~/components/content/arraySummary/ArraySummary";
import ContentComponents from "~/components/content/ContentComponents";
import ValidatedFlowForm from "~/components/formElements/ValidatedFlowForm";
import { FormFlowContext } from "~/components/formFlowContext";
import { useFocusFirstH1 } from "~/components/hooks/useFocusFirstH1";
import MigrationDataOverview from "~/components/MigrationDataOverview";
import FlowNavigation from "~/components/navigation/FlowNavigation";
import { ReportProblem } from "~/components/reportProblem/ReportProblem";
import type { loader } from "../formular";
import { GridSection } from "~/components/layout/grid/GridSection";
import { Grid } from "~/components/layout/grid/Grid";
import { GridItem } from "~/components/layout/grid/GridItem";
import { BACKGROUND_COLORS } from "~/components";
import Accordion from "~/components/common/Accordion";
import { getItemValueBox } from "~/components/content/summaryOverview/getItemValueBox";

export function FormFlowPage() {
  const {
    arraySummaryData,
    userData,
    buttonNavigationProps,
    cmsContent,
    csrf,
    formElements,
    migration,
    navigationProps,
    stepData,
    translations,
    validFlowPaths,
    flowId,
    showReportProblem,
    autoGeneratedSections,
  } = useLoaderData<typeof loader>();

  const formFlowMemo = useMemo(
    () => ({
      userData,
      validFlowPages: validFlowPaths,
      translations: translations,
      flowId,
    }),
    [userData, validFlowPaths, translations, flowId],
  );

  useFocusFirstH1();

  return (
    <FormFlowContext.Provider value={formFlowMemo}>
      <GridSection backgroundClass={BACKGROUND_COLORS.blue} pt="40" pb="40">
        <Grid>
          <GridItem
            className="hidden lg:block"
            lgColumn={{ start: 1, span: 4 }}
            xlColumn={{ start: 1, span: 4 }}
          >
            <div className="md:mb-32 lg:w-[312px]">
              <FlowNavigation {...navigationProps} />
            </div>
          </GridItem>
          <div className="lg:hidden md:col-span-8 ">
            <FlowNavigation {...navigationProps} />
          </div>
          <GridItem
            mdColumn={{ start: 1, span: 8 }}
            lgColumn={{ start: 5, span: 7 }}
            xlColumn={{ start: 5, span: 7 }}
          >
            <div className="flex flex-col flex-1 gap-32 md:pl-0 md:pb-32! pt-0! justify-between">
              <div className="ds-stack ds-stack-40">
                <div className="ds-stack ds-stack-16" id="flow-page-content">
                  {cmsContent.preHeading && (
                    <p className="ds-label-01-bold">{cmsContent.preHeading}</p>
                  )}
                  <Heading text={cmsContent.heading} look="ds-heading-02-reg" />
                  <ContentComponents
                    content={cmsContent.content}
                    className="ds-stack ds-stack-16"
                    managedByParent
                  />
                </div>

                <MigrationDataOverview
                  userData={migration.userData}
                  translations={translations}
                  sortedFields={migration.sortedFields}
                  buttonUrl={migration.buttonUrl}
                />
                {arraySummaryData &&
                  Object.keys(arraySummaryData).length !== 0 &&
                  Object.entries(arraySummaryData).map(([category, array]) => (
                    <ArraySummary
                      key={category}
                      category={category}
                      arrayData={{
                        configuration: array.configuration,
                        data: array.data,
                      }}
                      content={{
                        buttonLabel: array.buttonLabel,
                        description: array.description,
                        subtitle: array.subtitle,
                        title: array.title,
                        itemLabels: array.itemLabels,
                      }}
                      csrf={csrf}
                    />
                  ))}

                {/* Auto-generated summary sections */}
                {autoGeneratedSections && autoGeneratedSections.length > 0 && (
                  <Accordion
                    items={autoGeneratedSections.map((section) => ({
                      title: section.title?.text,
                      description: `<div class="ds-stack ds-stack-16">${
                        section.boxes
                          ?.map((box) => {
                            const editUrl = `..${box.stepId}`;
                            return `<div class="bg-white p-16 rounded mb-16 flex flex-col content-between sm:flex-row sm:justify-between">
                                <div>
                                  ${
                                    box.boxItems
                                      ?.map((boxItem) => {
                                        const itemValue = getItemValueBox(
                                          translations,
                                          userData,
                                          boxItem.inlineItems,
                                        );
                                        return itemValue.trim() !== ""
                                          ? `<div class="ds-body-02-reg mb-8">
                                               ${boxItem.title ? `<dt class="ds-label-01-bold">${boxItem.title}</dt>` : ""}
                                               <dd>${itemValue}</dd>
                                             </div>`
                                          : "";
                                      })
                                      .filter(Boolean)
                                      .join("") || ""
                                  }
                                </div>
                                <a href="${editUrl}" class="flex basis gap-2 pl-2 ds-link-01-bold items-start justify-end h-min">
                                  <svg width="24" height="24" fill="currentColor" class="shrink-0 inline">
                                    <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                                  </svg>
                                  <span>Bearbeiten</span>
                                </a>
                              </div>`;
                          })
                          .join("") || ""
                      }</div>`,
                    }))}
                  />
                )}

                <ValidatedFlowForm
                  stepData={stepData}
                  csrf={csrf}
                  formElements={formElements}
                  buttonNavigationProps={buttonNavigationProps}
                />
                <ContentComponents
                  content={cmsContent.postFormContent}
                  managedByParent
                />
              </div>
            </div>
          </GridItem>
          {showReportProblem && (
            <GridItem
              mdColumn={{ start: 1, span: 8 }}
              lgColumn={{ start: 1, span: 12 }}
              xlColumn={{ start: 1, span: 12 }}
              className="pb-40 flex justify-end"
              row={2}
            >
              <ReportProblem />
            </GridItem>
          )}
        </Grid>
      </GridSection>
    </FormFlowContext.Provider>
  );
}
