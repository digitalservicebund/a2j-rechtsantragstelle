import type { UserData } from "~/domains/userData";
import type { StrapiFormComponent } from "~/services/cms/models/formElements/StrapiFormComponent";
import type { Translations } from "~/services/translations/getTranslationByKey";
import type { FormFieldMetadata } from "./autoGenerateSummary";
import { getEnhancedFieldLabel } from "./labelEnhancement";
import { formatFieldValue, isFieldEmpty } from "./formatFieldValue";

const EXCLUDED_FIELDS = new Set(["pageData", "csrf", "_action"]);

// Type guard to check if component has a name property
function hasNameProperty(
  component: StrapiFormComponent,
): component is StrapiFormComponent & { name: string } {
  return "name" in component && typeof component.name === "string";
}

// Extract all form components including nested ones from fieldsets
function flattenFormComponents(
  components: StrapiFormComponent[],
): StrapiFormComponent[] {
  const flattened: StrapiFormComponent[] = [];

  components.forEach((component) => {
    if (component.__component === "form-elements.fieldset") {
      // Extract nested components from fieldset
      const fieldsetComponent = component;
      if (fieldsetComponent.fieldSetGroup?.formComponents) {
        flattened.push(
          ...flattenFormComponents(
            fieldsetComponent.fieldSetGroup.formComponents,
          ),
        );
      }
    } else {
      flattened.push(component);
    }
  });

  return flattened;
}

export function extractFormFieldsWithMetadata(
  userData: UserData,
  formComponents: StrapiFormComponent[],
  stepId: string,
  translations?: Translations,
): FormFieldMetadata[] {
  const fieldsMetadata: FormFieldMetadata[] = [];

  // Flatten components to handle nested fieldsets
  const flattenedComponents = flattenFormComponents(formComponents);

  flattenedComponents.forEach((component) => {
    // Skip components without name property
    if (!hasNameProperty(component)) {
      return;
    }

    // Skip excluded system fields
    if (EXCLUDED_FIELDS.has(component.name)) {
      return;
    }

    // Get the value from userData
    const value = userData[component.name];
    const isEmpty = isFieldEmpty(value, component.__component);

    // Generate enhanced label
    const autoGeneratedLabel = getEnhancedFieldLabel(
      component.name,
      component,
      translations,
    );

    fieldsMetadata.push({
      fieldName: component.name,
      autoGeneratedLabel,
      stepId,
      componentType: component.__component,
      value: formatFieldValue(
        value,
        component.name,
        component.__component,
        translations,
      ),
      isEmpty,
    });
  });

  return fieldsMetadata;
}

export function getFieldValueFromUserData(
  fieldName: string,
  userData: UserData,
): unknown {
  return userData[fieldName];
}

export function mapUserDataToFormComponents(
  userData: UserData,
  formComponents: StrapiFormComponent[],
): Record<string, { value: unknown; component: StrapiFormComponent }> {
  const mapping: Record<
    string,
    { value: unknown; component: StrapiFormComponent }
  > = {};

  formComponents.forEach((component) => {
    if (hasNameProperty(component) && !EXCLUDED_FIELDS.has(component.name)) {
      mapping[component.name] = {
        value: userData[component.name],
        component,
      };
    }
  });

  return mapping;
}
