import type { UserData } from "~/domains/userData";
import type { FlowController } from "~/services/flow/server/buildFlowController";
import type { SummaryItem } from "~/components/content/summaryOverview/AutoGeneratedSummary";
import type { Translations } from "~/services/translations/getTranslationByKey";
import {
  getFormQuestionsForFields,
  createFieldToStepMapping,
} from "./getFormQuestions";
import type { FlowId } from "~/domains/flowIds";
import { fetchAllFormFields } from "~/services/cms/fetchAllFormFields";
import { groupFieldsByFlowNavigation } from "./groupFieldsBySection";
import {
  getValidUserDataFields,
  processBoxFields,
} from "./processUserDataFields";

function createSummarySection(
  sectionName: string,
  allFields: Array<{ question: string; answer: string; editUrl?: string }>,
  sectionTitles: Record<string, string>,
  translations?: Translations,
): SummaryItem {
  return {
    id: sectionName,
    title:
      sectionTitles[sectionName] ?? translations?.[sectionName] ?? sectionName,
    fields: allFields,
  };
}

export async function generateSummaryFromUserData(
  userData: UserData,
  flowId: FlowId,
  translations?: Translations,
  flowController?: FlowController,
): Promise<SummaryItem[]> {
  const userDataFields = getValidUserDataFields(userData);

  if (userDataFields.length === 0) {
    return [];
  }

  const fieldQuestions = await getFormQuestionsForFields(
    userDataFields,
    flowId,
  );
  const formFieldsMap = await fetchAllFormFields(flowId);
  const fieldToStepMapping = createFieldToStepMapping(formFieldsMap);

  const groupingResult = flowController
    ? groupFieldsByFlowNavigation(
        userDataFields,
        flowController,
        fieldToStepMapping,
        translations,
      )
    : { groups: {}, sectionTitles: {} };

  const sections: SummaryItem[] = [];

  for (const [sectionName, boxes] of Object.entries(groupingResult.groups)) {
    const allFields: Array<{
      question: string;
      answer: string;
      editUrl?: string;
    }> = [];

    for (const [, fields] of Object.entries(boxes)) {
      const boxFields = processBoxFields(
        fields,
        userData,
        fieldQuestions,
        fieldToStepMapping,
      );
      allFields.push(...boxFields);
    }

    if (allFields.length === 0) {
      continue;
    }

    const section = createSummarySection(
      sectionName,
      allFields,
      groupingResult.sectionTitles,
      translations,
    );

    sections.push(section);
  }

  return sections;
}
