import { describe, it, expect, vi } from "vitest";
import { generateAutomaticSummary } from "../autoGenerateSummary";
import type { UserData } from "~/domains/userData";
import type { StrapiFormComponent } from "~/services/cms/models/formElements/StrapiFormComponent";
import type { Translations } from "~/services/translations/getTranslationByKey";

// Mock the dependencies
vi.mock("../formMetadata", () => ({
  extractFormFieldsWithMetadata: vi.fn(),
}));

const { extractFormFieldsWithMetadata } = await import("../formMetadata");
const mockExtractFormFieldsWithMetadata = vi.mocked(extractFormFieldsWithMetadata);

describe("generateAutomaticSummary", () => {
  const mockUserData: UserData = {
    vorname: "Max",
    nachname: "Mustermann",
    geburtsdatum: "1990-01-15",
    emptyField: "",
  };

  const mockFormComponents: StrapiFormComponent[] = [
    {
      __component: "form-elements.input",
      id: 1,
      name: "vorname",
      label: "Vorname",
      type: "text",
      width: "16",
      errorMessages: [],
    },
    {
      __component: "form-elements.input",
      id: 2,
      name: "nachname",
      label: "Nachname",
      type: "text",
      width: "16",
      errorMessages: [],
    },
  ] as StrapiFormComponent[];

  const mockTranslations: Translations = {
    "fields.vorname": "Vorname",
    "fields.nachname": "Nachname",
  };

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it("should generate summary section with form data", () => {
    mockExtractFormFieldsWithMetadata.mockReturnValue([
      {
        fieldName: "vorname",
        autoGeneratedLabel: "Vorname",
        stepId: "auto-generated",
        componentType: "form-elements.input",
        value: "Max",
        isEmpty: false,
      },
      {
        fieldName: "nachname",
        autoGeneratedLabel: "Nachname",
        stepId: "auto-generated",
        componentType: "form-elements.input",
        value: "Mustermann",
        isEmpty: false,
      },
    ]);

    const result = generateAutomaticSummary(
      mockUserData,
      mockFormComponents,
      mockTranslations
    );

    expect(result).toHaveLength(1);
    expect(result[0]).toMatchObject({
      __component: "page.summary-overview-section",
      id: 1,
      title: {
        text: "Automatically Generated Summary",
        level: "h2",
        look: "ds-heading-02-reg",
        id: "auto-summary-1",
      },
      boxes: [
        {
          id: 100,
          title: null,
          stepId: "auto-generated",
          boxItems: [
            {
              title: null,
              inlineItems: [
                { field: "vorname", emptyValuePlaceholder: "" },
                { field: "nachname", emptyValuePlaceholder: "" },
              ],
            },
          ],
        },
      ],
    });
  });

  it("should return empty array when all fields are empty", () => {
    mockExtractFormFieldsWithMetadata.mockReturnValue([
      {
        fieldName: "emptyField",
        autoGeneratedLabel: "Empty Field",
        stepId: "auto-generated",
        componentType: "form-elements.input",
        value: "",
        isEmpty: true,
      },
    ]);

    const result = generateAutomaticSummary(
      mockUserData,
      mockFormComponents,
      mockTranslations
    );

    expect(result).toHaveLength(0);
  });

  it("should filter out empty fields from summary", () => {
    mockExtractFormFieldsWithMetadata.mockReturnValue([
      {
        fieldName: "vorname",
        autoGeneratedLabel: "Vorname",
        stepId: "auto-generated",
        componentType: "form-elements.input",
        value: "Max",
        isEmpty: false,
      },
      {
        fieldName: "emptyField",
        autoGeneratedLabel: "Empty Field",
        stepId: "auto-generated",
        componentType: "form-elements.input",
        value: "",
        isEmpty: true,
      },
    ]);

    const result = generateAutomaticSummary(
      mockUserData,
      mockFormComponents,
      mockTranslations
    );

    expect(result).toHaveLength(1);
    expect(result[0].boxes[0].boxItems[0].inlineItems).toHaveLength(1);
    expect(result[0].boxes[0].boxItems[0].inlineItems[0].field).toBe("vorname");
  });

  it("should work without translations", () => {
    mockExtractFormFieldsWithMetadata.mockReturnValue([
      {
        fieldName: "vorname",
        autoGeneratedLabel: "Vorname",
        stepId: "auto-generated",
        componentType: "form-elements.input",
        value: "Max",
        isEmpty: false,
      },
    ]);

    const result = generateAutomaticSummary(
      mockUserData,
      mockFormComponents
    );

    expect(result).toHaveLength(1);
    expect(result[0].boxes[0].boxItems[0].inlineItems).toHaveLength(1);
  });

  it("should call extractFormFieldsWithMetadata with correct parameters", () => {
    mockExtractFormFieldsWithMetadata.mockReturnValue([]);

    generateAutomaticSummary(
      mockUserData,
      mockFormComponents,
      mockTranslations
    );

    expect(mockExtractFormFieldsWithMetadata).toHaveBeenCalledWith(
      mockUserData,
      mockFormComponents,
      "auto-generated",
      mockTranslations
    );
  });

  it("should handle empty form components array", () => {
    mockExtractFormFieldsWithMetadata.mockReturnValue([]);

    const result = generateAutomaticSummary(
      mockUserData,
      [],
      mockTranslations
    );

    expect(result).toHaveLength(0);
  });
});