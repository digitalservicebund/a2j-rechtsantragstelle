services:
  cert-generator:
    image: alpine:3.21
    container_name: cert-generator
    volumes:
      - ./certs:/certs
    command: >
      /bin/sh -c "
      if [ -f '/certs/redis-server.key' ] && [ -f '/certs/redis-server.crt' ]; then
        echo 'Using existing certificates';
      else
        apk add --no-cache openssl &&
        mkdir -p /certs &&
        openssl genrsa -out /certs/redis-server.key 2048 &&
        chmod 444 /certs/redis-server.key &&
        openssl req -new -x509 -nodes -sha256 -days 365 -subj '/C=DE/ST=Test/L=Test/O=Test/CN=Test' -key /certs/redis-server.key -out /certs/redis-server.crt &&
        echo 'Created new certificates' &&
        sleep 5;
      fi"

  frontend:
    build:
      context: .
    container_name: frontend
    depends_on:
      - redis
    ports:
      - "3001:3000"
    command: npm run start
    environment:
      REDIS_ENDPOINT: 172.17.0.1:6380 # Expose running redis container port
    env_file: .env

  redis:
    image: redis:8
    restart: always
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    container_name: local-redis
    ports:
      - "6380:6379"
    volumes:
      - ./certs:/usr/local/etc/redis

    command: >
      redis-server
      --tls-port 6379
      --port 0
      --tls-cert-file /usr/local/etc/redis/redis-server.crt
      --tls-key-file /usr/local/etc/redis/redis-server.key
      --tls-auth-clients no

  s3-bucket:
    container_name: local-s3-bucket
    image: localstack/localstack:s3-latest
    environment:
      - DEBUG=1
    ports:
      - "4566:4566"
    volumes:
      - "./init-s3-bucket.py:/etc/localstack/init/ready.d/init-s3-bucket.py"
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
